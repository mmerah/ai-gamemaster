# Backend Configuration for AI Game Master
# This is the FastAPI backend configuration
# Frontend configuration is in frontend/.env.example

# AI Provider Configuration
# Options: 'llamacpp_http' or 'openrouter'
AI_PROVIDER=llamacpp_http

# Response parsing mode: 'strict' (uses instructor) or 'flexible' (extracts JSON from text)
# flexible has more chances to be supported correctly by the models
AI_RESPONSE_PARSING_MODE=flexible

# Temperature setting for AI responses (0.0-2.0)
# Lower values (0.0-0.5) make responses more focused and deterministic
# Higher values (0.5-2.0) make responses more creative and varied
AI_TEMPERATURE=0.7

# Maximum tokens to generate in AI responses
# Adjust based on your model's capabilities and needs
AI_MAX_TOKENS=4096

# AI Retry Configuration
# Maximum number of retries for AI requests
AI_MAX_RETRIES=3
# Delay between retries in seconds
AI_RETRY_DELAY=5.0
# Request timeout in seconds
AI_REQUEST_TIMEOUT=60.0
# Retry context timeout in seconds (how long to keep retry context)
AI_RETRY_CONTEXT_TIMEOUT=300

# OpenRouter Configuration (only needed if AI_PROVIDER=openrouter)
OPENROUTER_API_KEY=your_openrouter_api_key_here
OPENROUTER_MODEL_NAME=google/gemini-2.5-flash-preview
OPENROUTER_BASE_URL=https://openrouter.ai/api/v1

# Llama.cpp HTTP Server Configuration (only needed if AI_PROVIDER=llamacpp_http)
LLAMA_SERVER_URL=http://127.0.0.1:8080

# Prompt Builder Configuration
# Maximum token budget for prompts (adjust based on your model's context window)
MAX_PROMPT_TOKENS_BUDGET=128000
# Number of recent history messages to include in prompts
LAST_X_HISTORY_MESSAGES=4
# Token overhead per message (for token counting)
TOKENS_PER_MESSAGE_OVERHEAD=4

# Auto-continuation Configuration
# Maximum depth for AI auto-continuation (prevents infinite loops)
MAX_AI_CONTINUATION_DEPTH=20

# RAG (Retrieval-Augmented Generation) Configuration
# Enable/disable the RAG system for knowledge retrieval
# Disabling can significantly speed up startup time and tests
RAG_ENABLED=true

# RAG Search Configuration
# Maximum results per individual query
RAG_MAX_RESULTS_PER_QUERY=3
# Maximum total results across all queries
RAG_MAX_TOTAL_RESULTS=8
# Minimum similarity score threshold (0.0-1.0)
RAG_SCORE_THRESHOLD=0.2

# RAG Embeddings Configuration
# Embeddings model to use for semantic search
RAG_EMBEDDINGS_MODEL=intfloat/multilingual-e5-small
# Dimension of the embedding vectors (must match the model's output)
RAG_EMBEDDING_DIMENSION=384
# Text chunk size for splitting documents
RAG_CHUNK_SIZE=500
# Overlap between chunks
RAG_CHUNK_OVERLAP=50

# RAG Advanced Configuration
# Collection name prefix for vector stores
RAG_COLLECTION_NAME_PREFIX=ai_gamemaster
# Enable metadata filtering in searches
RAG_METADATA_FILTERING_ENABLED=false
# Enable relevance feedback for search improvement
RAG_RELEVANCE_FEEDBACK_ENABLED=false
# Cache time-to-live in seconds
RAG_CACHE_TTL=3600

# Text-to-Speech Configuration
# Options: 'kokoro' (requires additional setup), 'none', 'disabled', 'test'
TTS_PROVIDER=kokoro

# TTS voice selection (used in TTS settings hierarchy)
# Default voice for text-to-speech narration
TTS_VOICE=af_heart

# Kokoro language code (only used when TTS_PROVIDER=kokoro)
# Options: 'a' (American English), 'b' (British English), etc.
KOKORO_LANG_CODE=a

# TTS cache directory name within static folder
TTS_CACHE_DIR_NAME=tts_cache

# Repository Configuration
# Controls which repository implementation to use for game state persistence
# Options: 'memory' (in-memory, lost on restart), 'file' (JSON files), 'database' (future)
GAME_STATE_REPO_TYPE=memory

# Directory paths for game data
# SAVES_DIR is only used as the base_dir when creating repositories for saves
CAMPAIGNS_DIR=saves/campaigns
CHARACTER_TEMPLATES_DIR=saves/character_templates
CAMPAIGN_TEMPLATES_DIR=saves/campaign_templates
SAVES_DIR=saves

# Database Configuration
# SQLAlchemy database URL (SQLite by default, can use PostgreSQL)
# Examples:
# - SQLite: sqlite:///data/content.db
# - PostgreSQL: postgresql://user:password@localhost/dbname
DATABASE_URL=sqlite:///data/content.db

# User content database URL (for user-created content packs)
# This database is not tracked in git and stores all user-created content
# Keeps user content separate from system D&D 5e SRD content
USER_DATABASE_URL=sqlite:///data/user_content.db

# Enable SQL query logging (useful for debugging)
DATABASE_ECHO=False

# Connection pool settings (mainly for PostgreSQL)
# Number of connections to maintain in the pool
DATABASE_POOL_SIZE=5
# Maximum overflow connections above pool_size
DATABASE_MAX_OVERFLOW=10
# Timeout in seconds for getting connection from pool
DATABASE_POOL_TIMEOUT=30
# Recycle connections after this many seconds (3600 = 1 hour)
DATABASE_POOL_RECYCLE=3600

# Enable sqlite-vec extension for vector search (SQLite only)
# This is used for RAG system optimization
ENABLE_SQLITE_VEC=true

# SQLite busy timeout in milliseconds
# Time to wait for database locks before giving up (default: 5000ms = 5 seconds)
# Increase this value if you experience "database is locked" errors
SQLITE_BUSY_TIMEOUT=5000

# Event Queue Configuration
# Maximum queue size (0 = unlimited)
EVENT_QUEUE_MAX_SIZE=0

# Application Configuration
SECRET_KEY=your-secret-key-here

# System Configuration
# Enable general debug mode
DEBUG=False
# Testing mode (automatically set to true in test environments)
TESTING=False

# Server-Sent Events (SSE) Configuration
# Heartbeat interval in seconds (keeps connection alive)
SSE_HEARTBEAT_INTERVAL=30
# Event timeout in seconds (how long to wait for events)
SSE_EVENT_TIMEOUT=1.0

# Logging Configuration
LOG_LEVEL=INFO
LOG_FILE=dnd_ai_poc.log
